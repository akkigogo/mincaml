問１
let x = 1 in let rec f y = x + y in f 1
は関数fにおいてxが自由変数となっているので

let rec f y = let x = 1 in x + y in f 1
などと書き直せばよい。

問2  <途中までしかできてない?。 疑問点を教えていただきたいです。>
lambda liftingを行った。
例えば、
let x = 1 in let rec f y = x + y in f 1
let x = 1 in ket rec f y x = x + y in f 1 x
として自由変数を引数の中に入れて自由変数を消去できる.

つまり、2ステップ行えばいい。
トップレベルに定義されている関数の引数のリストに自由変数を加え、 ...(1)
さらに関数適用のときに自由変数を付け足して適用するということをした。    ...(2)
具体的にはclosure.mlを書き換えた。
まず、本来は
toplevel := { name = (Id.L(x), t); args = yts; formal_fv = zts; body = e1' } :: !toplevel;
という風にtoplevel関数を定義していたが
newtoplevel := { name = (Id.L(x), t); args = yts@zts; formal_fv = []; body = e1' } :: !newtoplevel;
という風に、(1)を行った。(本来のtoplevelもあった方が便利なので残しておく。)
さらに、関数適用のときは、
let thisfun = find_fun (L(f)) !toplevel in　　　　　　　　（まず、toplevelにあるfを探してきてthisfunにいれる。)
  let inserted_fv = arg_name thisfun.formal_fv in       (付け足す必要のある自由変数をinsert_fvとおzく。)
   　AppDir(Id.L(f), xs@(inserted_fv))                  （元の引数xsに加えてinsert_fvを引数に)
というふうに(2)を行った。

<疑問>
しかし、これでは部分適用している関数がうまくいかない。
例えば
let rec make_adder x =
  let rec adder y = x + y in
  adder in
print_int ((make_adder 3) 7)
だと(make_adder 3)という関数を7に適用するが、そもそも(make_adder 3) というtoplevel関数は存在しないのでこの手法だとできない。
これは通常通りに関数適用する場合は(make_adder 3)のようなものを新しくtoplevel関数に追加するみたいなことが必要なのでしょうか?

取り敢えず、toplevel関数で見つからなかったらクロージャー変換しています。

問3

1.  let z = 4 in let rec f x = x – z in f 8

let z = 4 in let rec f {z} x = x - z in
    let f' = <Lf, {z}> in
        f'@8
関数fにおいて自由変数zが存在するため、クロージャは作られる。クロージャには自由変数zとfのラベルが含まれる。

2.    let rec g x = x - 2 in g 6

される理由がないのでされない。

3.  let rec f x = x - 1 in f

let rec f {} x = x - 1 in
    let f' = <Lf, {z}> in
    f'
f'を受け取る側にとっては自由変数を持つかどうか分からないのでクロージャーは作られる

4.  let rec g h = let rec i x = h x in i in g

let rec g {} h =
    let rec i {h} x = h @ x in
        let i' = <Li, {h}> in
            let g' = <Lg, {}> in
                i' in g'
関数gは、最後にg単体で最後に渡されているのでクロージャーは作られる。関数iは自由変数hを持つのでクロージャーは作られる。

5.  let rec i x = x in
    let z = 4 in
    let rec f = i (z - 5) in
        if z < 6 then (i, f 7) else (f, 8)

let rec i {} x = x in
    let z = 4 in
        let rec f {i, x, z} = i (z - 5) in
            let f' = <Lf, {i, x, z}> in
                let i' = <Li, {}> in
                    if z < 6 then (i', f'@7) else (f', 8)
関数iは、最後にi単体で最後に渡されているのでクロージャーは作られる。関数fは自由変数i, x, zを持つのでクロージャーは作られる。

6.  let rec fact x =
        if x = 1 then 1
        else x * fact (x - 1) in
        fact 6

let rec fact {} x =
    if x = 1 then 1
    else x * fact (x - 1) in
    fact 6

される理由がないのでされない。